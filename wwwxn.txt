1 词法分析
// i am a function: this function has many syntax errors.

int f(){
	int a;
	a = 0;
	while(a<10){
		a = a * 2345;
	}
	return a;
}

int main(){
	int _testid;
	_testid = 0;
	if(_testid==0){
		int _testid;
		int _testid2;
		_testid1=_testid1+1;
	}
	/*
		Comment lines;
	*/
	{
		int a;
	}
	{
		int a;
	}
	int b;
	return 0;
}

/*
	Comment lines.
*/



wxn


[DEBUG LAB4]: 	linecomment	// i am a function: this function has many syntax errors.	linecount:1
[DEBUG LAB4]: 	INT	int	linecount:3
[DEBUG LAB4]: 	ID	f	linecount:3	IDcount:1
[DEBUG LAB4]: 	LPAREN	(	linecount:3
[DEBUG LAB4]: 	RPAREN	)	linecount:3
[DEBUG LAB4]: 	LBRACE	{	linecount:3
[DEBUG LAB4]: 	INT	int	linecount:4
[DEBUG LAB4]: 	ID	a	linecount:4	IDcount:2
[DEBUG LAB4]: 	SEMICOLON	;	linecount:4
[DEBUG LAB4]: 	ID	a	linecount:5	IDcount:2
[DEBUG LAB4]: 	ASSIGN	=	linecount:5
[DEBUG LAB4]: 	DECIMIAL	0	linecount:5
[DEBUG LAB4]: 	SEMICOLON	;	linecount:5
[DEBUG LAB4]: 	WHILE	while	linecount:6
[DEBUG LAB4]: 	LPAREN	(	linecount:6
[DEBUG LAB4]: 	ID	a	linecount:6	IDcount:2
[DEBUG LAB4]: 	LESS	<	linecount:6
[DEBUG LAB4]: 	DECIMIAL	10	linecount:6
[DEBUG LAB4]: 	RPAREN	)	linecount:6
[DEBUG LAB4]: 	LBRACE	{	linecount:6
[DEBUG LAB4]: 	ID	a	linecount:7	IDcount:3
[DEBUG LAB4]: 	ASSIGN	=	linecount:7
[DEBUG LAB4]: 	ID	a	linecount:7	IDcount:3
[DEBUG LAB4]: 	STAR	*	linecount:7
[DEBUG LAB4]: 	DECIMIAL	2345	linecount:7
[DEBUG LAB4]: 	SEMICOLON	;	linecount:7
[DEBUG LAB4]: 	RBRACE	}	linecount:8
[DEBUG LAB4]: 	RETURN	return	linecount:9
[DEBUG LAB4]: 	ID	a	linecount:9	IDcount:2
[DEBUG LAB4]: 	SEMICOLON	;	linecount:9
[DEBUG LAB4]: 	RBRACE	}	linecount:10
[DEBUG LAB4]: 	INT	int	linecount:12
[DEBUG LAB4]: 	ID	main	linecount:12	IDcount:4
[DEBUG LAB4]: 	LPAREN	(	linecount:12
[DEBUG LAB4]: 	RPAREN	)	linecount:12
[DEBUG LAB4]: 	LBRACE	{	linecount:12
[DEBUG LAB4]: 	INT	int	linecount:13
[DEBUG LAB4]: 	ID	_testid	linecount:13	IDcount:5
[DEBUG LAB4]: 	SEMICOLON	;	linecount:13
[DEBUG LAB4]: 	ID	_testid	linecount:14	IDcount:5
[DEBUG LAB4]: 	ASSIGN	=	linecount:14
[DEBUG LAB4]: 	DECIMIAL	0	linecount:14
[DEBUG LAB4]: 	SEMICOLON	;	linecount:14
[DEBUG LAB4]: 	IF	if	linecount:15
[DEBUG LAB4]: 	LPAREN	(	linecount:15
[DEBUG LAB4]: 	ID	_testid	linecount:15	IDcount:5
[DEBUG LAB4]: 	EQUAL	==	linecount:15
[DEBUG LAB4]: 	DECIMIAL	0	linecount:15
[DEBUG LAB4]: 	RPAREN	)	linecount:15
[DEBUG LAB4]: 	LBRACE	{	linecount:15
[DEBUG LAB4]: 	INT	int	linecount:16
[DEBUG LAB4]: 	ID	_testid	linecount:16	IDcount:6
[DEBUG LAB4]: 	SEMICOLON	;	linecount:16
[DEBUG LAB4]: 	INT	int	linecount:17
[DEBUG LAB4]: 	ID	_testid2	linecount:17	IDcount:7
[DEBUG LAB4]: 	SEMICOLON	;	linecount:17
[DEBUG LAB4]: 	ID	_testid1	linecount:18	IDcount:8
[DEBUG LAB4]: 	ASSIGN	=	linecount:18
[DEBUG LAB4]: 	ID	_testid1	linecount:18	IDcount:8
[DEBUG LAB4]: 	ADD	+	linecount:18
[DEBUG LAB4]: 	DECIMIAL	1	linecount:18
[DEBUG LAB4]: 	SEMICOLON	;	linecount:18
[DEBUG LAB4]: 	RBRACE	}	linecount:19
[DEBUG LAB4]: 	commentbegin	/*	linecount:20
[DEBUG LAB4]: 	commentelement		linecount:21
[DEBUG LAB4]: 	commentelement			linecount:21
[DEBUG LAB4]: 	commentelement			linecount:21
[DEBUG LAB4]: 	commentelement	C	linecount:21
[DEBUG LAB4]: 	commentelement	o	linecount:21
[DEBUG LAB4]: 	commentelement	m	linecount:21
[DEBUG LAB4]: 	commentelement	m	linecount:21
[DEBUG LAB4]: 	commentelement	e	linecount:21
[DEBUG LAB4]: 	commentelement	n	linecount:21
[DEBUG LAB4]: 	commentelement	t	linecount:21
[DEBUG LAB4]: 	commentelement	 	linecount:21
[DEBUG LAB4]: 	commentelement	l	linecount:21
[DEBUG LAB4]: 	commentelement	i	linecount:21
[DEBUG LAB4]: 	commentelement	n	linecount:21
[DEBUG LAB4]: 	commentelement	e	linecount:21
[DEBUG LAB4]: 	commentelement	s	linecount:21
[DEBUG LAB4]: 	commentelement	;	linecount:21
[DEBUG LAB4]: 	commentelement		linecount:22
[DEBUG LAB4]: 	commentelement			linecount:22
[DEBUG LAB4]: 	commentend	*/	linecount:22
[DEBUG LAB4]: 	LBRACE	{	linecount:23
[DEBUG LAB4]: 	INT	int	linecount:24
[DEBUG LAB4]: 	ID	a	linecount:24	IDcount:9
[DEBUG LAB4]: 	SEMICOLON	;	linecount:24
[DEBUG LAB4]: 	RBRACE	}	linecount:25
[DEBUG LAB4]: 	LBRACE	{	linecount:26
[DEBUG LAB4]: 	INT	int	linecount:27
[DEBUG LAB4]: 	ID	a	linecount:27	IDcount:10
[DEBUG LAB4]: 	SEMICOLON	;	linecount:27
[DEBUG LAB4]: 	RBRACE	}	linecount:28
[DEBUG LAB4]: 	INT	int	linecount:29
[DEBUG LAB4]: 	ID	b	linecount:29	IDcount:11
[DEBUG LAB4]: 	SEMICOLON	;	linecount:29
[DEBUG LAB4]: 	RETURN	return	linecount:30
[DEBUG LAB4]: 	DECIMIAL	0	linecount:30
[DEBUG LAB4]: 	SEMICOLON	;	linecount:30
[DEBUG LAB4]: 	RBRACE	}	linecount:31
[DEBUG LAB4]: 	commentbegin	/*	linecount:33
[DEBUG LAB4]: 	commentelement		linecount:34
[DEBUG LAB4]: 	commentelement			linecount:34
[DEBUG LAB4]: 	commentelement	C	linecount:34
[DEBUG LAB4]: 	commentelement	o	linecount:34
[DEBUG LAB4]: 	commentelement	m	linecount:34
[DEBUG LAB4]: 	commentelement	m	linecount:34
[DEBUG LAB4]: 	commentelement	e	linecount:34
[DEBUG LAB4]: 	commentelement	n	linecount:34
[DEBUG LAB4]: 	commentelement	t	linecount:34
[DEBUG LAB4]: 	commentelement	 	linecount:34
[DEBUG LAB4]: 	commentelement	l	linecount:34
[DEBUG LAB4]: 	commentelement	i	linecount:34
[DEBUG LAB4]: 	commentelement	n	linecount:34
[DEBUG LAB4]: 	commentelement	e	linecount:34
[DEBUG LAB4]: 	commentelement	s	linecount:34
[DEBUG LAB4]: 	commentelement	.	linecount:34
[DEBUG LAB4]: 	commentelement		linecount:35
[DEBUG LAB4]: 	commentend	*/	linecount:35








2 语法分析


int a;
int main()
{
    if(!a){
        int z;
    }
    int a;
    a = 1 + 2;
    if(a < 5)
        return 1;
    return 0;
}




wxn

program
    Sequence
        DeclStmt
            IdList
                Id	name: a	scope: 0	type: int
        FunctionDefine function name: main, type: int()
            CompoundStmt
                Sequence
                    Sequence
                        Sequence
                            Sequence
                                IfStmt
                                    SignleExpr	op: anti
                                        Id	name: a	scope: 0	type: int
                                    CompoundStmt
                                        DeclStmt
                                            IdList
                                                Id	name: z	scope: 3	type: int
                                DeclStmt
                                    IdList
                                        Id	name: a	scope: 2	type: int
                            AssignStmt
                                Id	name: a	scope: 2	type: int
                                BinaryExpr	op: add
                                    IntegerLiteral	value: 1	type: int
                                    IntegerLiteral	value: 2	type: int
                        IfStmt
                            BinaryExpr	op: less
                                Id	name: a	scope: 2	type: int
                                IntegerLiteral	value: 5	type: int
                            ReturnStmt
                                IntegerLiteral	value: 1	type: int
                    ReturnStmt
                        IntegerLiteral	value: 0	type: int







3-1 类型检查

/* function undefinition */

int func(int a, int b, int c)
{
	return a + b + c;
}
int main()
{
	return func(1);
}


wxn

test/lab6/03_func_undef.ll:23:19: error: '@func' defined with type 'i32 (i32, i32, i32)*' but expected 'i32 (i32)*'
  %t20 = call i32 @func(i32 1)
                  ^


3-2 中间代码

int fun(int m,int n){
	int rem;			
	while(n > 0){
		rem = m % n;
		m = n;
		n = rem;
	}
	return m;				
}
int main(){
	int n,m;
	int num;
	m=getint();
	n=getint();
	num=fun(m,n);
	putint(num);

	return 0; 
}

wxn


;TypeCheck Begin!
declare i32 @getint()
declare void @putint(i32)
declare i32 @getch()
declare void @putch(i32)
define i32 @fun(i32 %t24, i32 %t27){
B23:
  %t30 = alloca i32, align 4
  %t26 = alloca i32, align 4
  store i32 %t24, i32* %t26, align 4
  %t29 = alloca i32, align 4
  store i32 %t27, i32* %t29, align 4
  br label %B33
B33:                               	; preds = %B23
  %t3 = load i32, i32* %t29, align 4
  %t4 = icmp sgt i32 %t3, 0
  br i1 %t4, label %B31, label %B32
B31:                               	; preds = %B33, %B33
  %t6 = load i32, i32* %t26, align 4
  %t7 = load i32, i32* %t29, align 4
  %t8 = srem i32 %t6, %t7
  store i32 %t8, i32* %t30, align 4
  %t10 = load i32, i32* %t29, align 4
  store i32 %t10, i32* %t26, align 4
  %t12 = load i32, i32* %t30, align 4
  store i32 %t12, i32* %t29, align 4
  br i1 %t4, label %B33, label %B32
B32:                               	; preds = %B31, %B33, %B33
  %t13 = load i32, i32* %t26, align 4
  ret i32 %t13
}
define i32 @main(){
B34:
  %t37 = alloca i32, align 4
  %t36 = alloca i32, align 4
  %t35 = alloca i32, align 4
  %t39 = call i32 @getint()
  store i32 %t39, i32* %t35, align 4
  %t41 = call i32 @getint()
  store i32 %t41, i32* %t36, align 4
  %t20 = load i32, i32* %t35, align 4
  %t21 = load i32, i32* %t36, align 4
  %t43 = call i32 @fun(i32 %t20, i32 %t21)
  store i32 %t43, i32* %t37, align 4
  %t22 = load i32, i32* %t37, align 4
  call void @putint(i32 %t22)
  ret i32 0
}





4 目标代码

int func(int n) {
  if (n <= 50) {
    putint(n);
    return 1;
  }
  else {
    putint(n);
    return 0;
  }
}

int main() {
  int i;

  if (func(0) == 1 || func(50) == 1 && func(100) == 0)
    i = 0;
  else
    i = 1;
  
  if (func(50) == 1 && func(40) == 1 || func(1) == 1 )
    i = 0;
  else
    i = 1;

  return 0;
}


wxn

	.cpu cortex-a72
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.text
	.global func
	.type func , %function
func:
	push {r3, r4, fp, lr}
	mov fp, sp
	sub sp, sp, #8
.L27:
	str r0, [fp, #-4]
	ldr r4, [fp, #-4]
	cmp r4, #50
	movle r4, #1
	movgt r4, #0
	ble .L29
	b .L34
.L29:
	ldr r4, [fp, #-4]
	mov r0, r4
	bl putint
	mov r0, #1
	add sp, sp, #8
	pop {r3, r4, fp, lr}
	bx lr
.L34:
	b .L30
.L30:
	ldr r4, [fp, #-4]
	mov r0, r4
	bl putint
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, fp, lr}
	bx lr

	.global main
	.type main , %function
main:
	push {r3, r4, fp, lr}
	mov fp, sp
	sub sp, sp, #8
.L35:
	mov r0, #0
	bl func
	mov r4, r0
	cmp r4, #1
	moveq r4, #1
	movne r4, #0
	beq .L37
	b .L43
.L37:
	ldr r4, =0
	str r4, [fp, #-4]
	b .L39
.L39:
	mov r0, #50
	bl func
	mov r4, r0
	cmp r4, #1
	moveq r4, #1
	movne r4, #0
	beq .L55
	b .L58
.L55:
	mov r0, #40
	bl func
	mov r4, r0
	cmp r4, #1
	moveq r4, #1
	movne r4, #0
	beq .L51
	b .L61
.L51:
	ldr r4, =0
	str r4, [fp, #-4]
	b .L53
.L53:
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, fp, lr}
	bx lr
.L61:
	b .L54
.L54:
	mov r0, #1
	bl func
	mov r4, r0
	cmp r4, #1
	moveq r4, #1
	movne r4, #0
	beq .L51
	b .L64
.L64:
	b .L52
.L52:
	ldr r4, =1
	str r4, [fp, #-4]
	b .L53
.L58:
	b .L54
.L43:
	b .L40
.L40:
	mov r0, #50
	bl func
	mov r4, r0
	cmp r4, #1
	moveq r4, #1
	movne r4, #0
	beq .L44
	b .L47
.L44:
	mov r0, #100
	bl func
	mov r4, r0
	cmp r4, #0
	moveq r4, #1
	movne r4, #0
	beq .L37
	b .L50
.L50:
	b .L38
.L38:
	ldr r4, =1
	str r4, [fp, #-4]
	b .L39
.L47:
	b .L38

	.ident "hlast"





